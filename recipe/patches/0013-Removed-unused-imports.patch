From b493c398700cf7c98251a175a1ba5cf4fc653b04 Mon Sep 17 00:00:00 2001
From: Sergei Lebedev <slebedev@google.com>
Date: Wed, 30 Jun 2021 08:30:47 -0700
Subject: [PATCH 13/20] Removed unused imports

PiperOrigin-RevId: 382309223
---
 tree/__init__.py  | 62 ++++++++++++++++++++---------------------------
 tree/tree_test.py |  6 ++++-
 2 files changed, 31 insertions(+), 37 deletions(-)

diff --git a/tree/__init__.py b/tree/__init__.py
index c49d066..cf389b4 100644
--- a/tree/__init__.py
+++ b/tree/__init__.py
@@ -15,16 +15,15 @@
 
 """Functions for working with nested data structures."""
 
-import collections
 from collections import abc as collections_abc
-import functools
 import logging
 import sys
-import types
-from tree.sequence import _is_attrs
-from tree.sequence import _is_namedtuple
-from tree.sequence import _sequence_like
-from tree.sequence import _sorted
+from typing import Mapping, Sequence, Text, TypeVar, Union
+
+from .sequence import _is_attrs
+from .sequence import _is_namedtuple
+from .sequence import _sequence_like
+from .sequence import _sorted
 
 # pylint: disable=g-import-not-at-top
 try:
@@ -34,13 +33,6 @@ except ImportError:
   class ObjectProxy(object):
     """Stub-class for `wrapt.ObjectProxy``."""
 
-try:
-  from typing import Any, Mapping, Sequence, Union, Text, TypeVar
-except ImportError:
-  typing_available = False
-else:
-  typing_available = True
-
 try:
   from tree import _tree
 except ImportError:
@@ -96,28 +88,26 @@ _IF_SHALLOW_IS_SEQ_INPUT_MUST_BE_SEQ = (
     "If shallow structure is a sequence, input must also be a sequence. "
     "Input has type: {}.")
 
-if typing_available:
-  K = TypeVar("K")
-  V = TypeVar("V")
-  # A generic monomorphic structure type, e.g. ``StructureKV[Text, int]``
-  # is an arbitrarily nested structure where keys must be of type ``Text``
-  # and values are integers.
-  # pytype: disable=not-supported-yet
-  # TODO(b/146184840): Remove pytype disable when recursive types supported
-  StructureKV = Union[
-      Sequence["StructureKV[K, V]"],
-      Mapping[K, "StructureKV[K, V]"],
-      V,
-  ]
-  # pytype: enable=not-supported-yet
-  # A specialization of ``StructureKV`` for the common case of ``Text`` keys.
-  try:
-    Structure = StructureKV[Text, V]
-  except TypeError:
-    # Older Python 3.5 and 3.6 releases do not always support such use
-    # of generics. Specialize ``StructureKV`` manually.
-    Structure = Union[Sequence["Structure[V]"], Mapping[Text, "Structure[V]"],
-                      V]
+K = TypeVar("K")
+V = TypeVar("V")
+# A generic monomorphic structure type, e.g. ``StructureKV[Text, int]``
+# is an arbitrarily nested structure where keys must be of type ``Text``
+# and values are integers.
+# pytype: disable=not-supported-yet
+# TODO(b/146184840): Remove disable= when pytype supports recursive types.
+StructureKV = Union[
+    Sequence["StructureKV[K, V]"],
+    Mapping[K, "StructureKV[K, V]"],
+    V,
+]
+# pytype: enable=not-supported-yet
+# A specialization of ``StructureKV`` for the common case of ``Text`` keys.
+try:
+  Structure = StructureKV[Text, V]
+except TypeError:
+  # Older Python 3.5 and 3.6 releases do not always support such use
+  # of generics. Specialize ``StructureKV`` manually.
+  Structure = Union[Sequence["Structure[V]"], Mapping[Text, "Structure[V]"], V]
 
 
 def _get_attrs_items(obj):
diff --git a/tree/tree_test.py b/tree/tree_test.py
index 7d0370e..a0e2d41 100644
--- a/tree/tree_test.py
+++ b/tree/tree_test.py
@@ -34,8 +34,12 @@ STRUCTURE_DIFFERENT_NESTING = (((1, 2), 3), 4, 5, (6,))
 class DoctestTest(parameterized.TestCase):
 
   def testDoctest(self):
+    extraglobs = {
+        "collections": collections,
+        "tree": tree,
+    }
     num_failed, num_attempted = doctest.testmod(
-        tree, extraglobs={"tree": tree}, optionflags=doctest.ELLIPSIS)
+        tree, extraglobs=extraglobs, optionflags=doctest.ELLIPSIS)
     self.assertGreater(num_attempted, 0, "No doctests found.")
     self.assertEqual(num_failed, 0, "{} doctests failed".format(num_failed))
 
-- 
2.25.1

