From 5f597002782b0d32186524edde6c3285a1dbe02a Mon Sep 17 00:00:00 2001
From: Gregory Thornton <gregthornton@google.com>
Date: Thu, 1 Jul 2021 08:58:33 -0700
Subject: [PATCH 14/20] Add test to cover mapping custom classes with paths.

PiperOrigin-RevId: 382534564
---
 tree/tree_test.py | 33 +++++++++++++++++++++++++++++++++
 1 file changed, 33 insertions(+)

diff --git a/tree/tree_test.py b/tree/tree_test.py
index a0e2d41..d6c9566 100644
--- a/tree/tree_test.py
+++ b/tree/tree_test.py
@@ -17,6 +17,7 @@
 import collections
 import doctest
 import types
+from typing import Any, Iterator, Mapping
 import unittest
 
 from absl.testing import parameterized
@@ -1093,6 +1094,38 @@ class NestTest(parameterized.TestCase):
     structure = ((1, None))
     self.assertEqual(tree.flatten(structure), [1, None])
 
+  def testCustomClassMapWithPath(self):
+
+    class ExampleClass(Mapping[Any, Any]):
+      """Small example custom class."""
+
+      def __init__(self, *args, **kwargs):
+        self._mapping = dict(*args, **kwargs)
+
+      def __getitem__(self, k: Any) -> Any:
+        return self._mapping[k]
+
+      def __len__(self) -> int:
+        return len(self._mapping)
+
+      def __iter__(self) -> Iterator[Any]:
+        return iter(self._mapping)
+
+    def mapper(path, value):
+      full_path = "/".join(path)
+      return f"{full_path}_{value}"
+
+    test_input = ExampleClass({"first": 1, "nested": {"second": 2, "third": 3}})
+    output = tree.map_structure_with_path(mapper, test_input)
+    expected = ExampleClass({
+        "first": "first_1",
+        "nested": {
+            "second": "nested/second_2",
+            "third": "nested/third_3"
+        }
+    })
+    self.assertEqual(output, expected)
+
 
 if __name__ == "__main__":
   unittest.main()
-- 
2.25.1

